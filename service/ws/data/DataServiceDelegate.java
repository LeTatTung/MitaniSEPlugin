package ws.data;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.3-hudson-390-
 * Generated source version: 2.0
 * 
 */
@WebService(name = "DataServiceDelegate", targetNamespace = "http://data.ws/")
public interface DataServiceDelegate {

	/**
	 * 
	 * @param arg0
	 * @return returns boolean
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "isInitited", targetNamespace = "http://data.ws/", className = "ws.data.IsInitited")
	@ResponseWrapper(localName = "isInititedResponse", targetNamespace = "http://data.ws/", className = "ws.data.IsInititedResponse")
	public boolean isInitited(@WebParam(name = "arg0", targetNamespace = "")
	String arg0);

	/**
	 * 
	 * @param arg0
	 * @return returns boolean
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "reloadOntology", targetNamespace = "http://data.ws/", className = "ws.data.ReloadOntology")
	@ResponseWrapper(localName = "reloadOntologyResponse", targetNamespace = "http://data.ws/", className = "ws.data.ReloadOntologyResponse")
	public boolean reloadOntology(
			@WebParam(name = "arg0", targetNamespace = "")
			String arg0);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 * @return returns java.util.List<java.lang.String>
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "listClassInstance", targetNamespace = "http://data.ws/", className = "ws.data.ListClassInstance")
	@ResponseWrapper(localName = "listClassInstanceResponse", targetNamespace = "http://data.ws/", className = "ws.data.ListClassInstanceResponse")
	public List<String> listClassInstance(
			@WebParam(name = "arg0", targetNamespace = "")
			String arg0, @WebParam(name = "arg1", targetNamespace = "")
			String arg1);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 * @return returns java.util.List<ws.data.ArrayListData>
	 */
	@WebMethod(operationName = "SparqlResultList")
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "SparqlResultList", targetNamespace = "http://data.ws/", className = "ws.data.SparqlResultList")
	@ResponseWrapper(localName = "SparqlResultListResponse", targetNamespace = "http://data.ws/", className = "ws.data.SparqlResultListResponse")
	public List<ArrayListData> sparqlResultList(
			@WebParam(name = "arg0", targetNamespace = "")
			String arg0, @WebParam(name = "arg1", targetNamespace = "")
			String arg1);

	/**
	 * 
	 * @param arg0
	 * @return returns ws.data.NodeData
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "getNodeData", targetNamespace = "http://data.ws/", className = "ws.data.GetNodeData")
	@ResponseWrapper(localName = "getNodeDataResponse", targetNamespace = "http://data.ws/", className = "ws.data.GetNodeDataResponse")
	public NodeData getNodeData(@WebParam(name = "arg0", targetNamespace = "")
	String arg0);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 */
	@WebMethod
	@RequestWrapper(localName = "saveAnnotationClient", targetNamespace = "http://data.ws/", className = "ws.data.SaveAnnotationClient")
	@ResponseWrapper(localName = "saveAnnotationClientResponse", targetNamespace = "http://data.ws/", className = "ws.data.SaveAnnotationClientResponse")
	public void saveAnnotationClient(
			@WebParam(name = "arg0", targetNamespace = "")
			String arg0, @WebParam(name = "arg1", targetNamespace = "")
			List<InstanceData> arg1);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 * @param arg2
	 * @return returns java.util.List<ws.data.MapData>
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "getValuePropertyIndividual", targetNamespace = "http://data.ws/", className = "ws.data.GetValuePropertyIndividual")
	@ResponseWrapper(localName = "getValuePropertyIndividualResponse", targetNamespace = "http://data.ws/", className = "ws.data.GetValuePropertyIndividualResponse")
	public List<MapData> getValuePropertyIndividual(
			@WebParam(name = "arg0", targetNamespace = "")
			String arg0, @WebParam(name = "arg1", targetNamespace = "")
			List<String> arg1, @WebParam(name = "arg2", targetNamespace = "")
			String arg2);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 * @return returns ws.data.NodeData
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "getClassData", targetNamespace = "http://data.ws/", className = "ws.data.GetClassData")
	@ResponseWrapper(localName = "getClassDataResponse", targetNamespace = "http://data.ws/", className = "ws.data.GetClassDataResponse")
	public NodeData getClassData(@WebParam(name = "arg0", targetNamespace = "")
	String arg0, @WebParam(name = "arg1", targetNamespace = "")
	String arg1);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 * @param arg2
	 */
	@WebMethod
	@RequestWrapper(localName = "processAutoAnalyze", targetNamespace = "http://data.ws/", className = "ws.data.ProcessAutoAnalyze")
	@ResponseWrapper(localName = "processAutoAnalyzeResponse", targetNamespace = "http://data.ws/", className = "ws.data.ProcessAutoAnalyzeResponse")
	public void processAutoAnalyze(
			@WebParam(name = "arg0", targetNamespace = "")
			List<DocumentData> arg0,
			@WebParam(name = "arg1", targetNamespace = "")
			List<DocumentData> arg1,
			@WebParam(name = "arg2", targetNamespace = "")
			List<DocumentData> arg2);

	/**
	 * 
	 * @param arg1
	 * @param arg0
	 * @param arg2
	 */
	@WebMethod
	@RequestWrapper(localName = "creatArtifactInstance", targetNamespace = "http://data.ws/", className = "ws.data.CreatArtifactInstance")
	@ResponseWrapper(localName = "creatArtifactInstanceResponse", targetNamespace = "http://data.ws/", className = "ws.data.CreatArtifactInstanceResponse")
	public void creatArtifactInstance(
			@WebParam(name = "arg0", targetNamespace = "")
			String arg0, @WebParam(name = "arg1", targetNamespace = "")
			String arg1, @WebParam(name = "arg2", targetNamespace = "")
			String arg2);

}
